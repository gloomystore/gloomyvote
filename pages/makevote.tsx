import Head from 'next/head'
import NavBar from '@/components/NavBar'
import Footer from '@/components/Footer'
import styles from '@/styles/chat.module.scss'
import { useCallback, useEffect, useMemo, useRef, useState } from 'react'
import axios from 'axios';
import { ParsedUrlQuery } from 'querystring';
import { GetServerSideProps, GetServerSidePropsContext, GetServerSidePropsResult } from 'next';

import Link from 'next/link'
import { useRouter } from 'next/router'

type Props = {
  uuid: string;
};

// export const getServerSideProps: GetServerSideProps<Props> = async (ctx: GetServerSidePropsContext<ParsedUrlQuery>) => {
//   const { uuid } = ctx.params || {};

//   // UUID 값에 대한 추가 로직 수행

//   return {
//     props: {
//       uuid,
//     },
//   } as GetServerSidePropsResult<Props>;;
// };


export default function Chat() {
  // nextauth 로그
  const router = useRouter()
 // 유저들 정보
  const [users,setUsers]:[[{
    name:string,
    email:string,
    image:string,
  }],Function] = useState([{
    name:'',
    email:'',
    image:'',
  }])

  // 유저의 정보 가져오기
  const getUserData = async () => {
    try {
      const res = await axios.get(`/api/users/get`);
      return res.data
    } catch (err) {
      console.log(err);
    }
  };


 // 채팅방 정보 만들기
 async function setChatroom(uuid:string,name:string,host:string,guest:string,timestamp:string,time:string){
  try {
    const data = {uuid, name, host, guest, timestamp, time}
    const res = await axios.post(`/api/chatroom/set`, data);
    return res
  } catch (err) {
    console.log(err);
  }
};
 // 실제 채팅방 만들기
 async function setChat(parentId:string){
  try {
    const {uuid} = getUuid();
    const data = {
      parentId,uuid,chat:[]
    }
    const res = await axios.post(`/api/chats/set`, data);
    return res
  } catch (err) {
    console.log(err);
  }
};

  function getUuid(){
    const currentDate = new Date();
    const year = currentDate.getFullYear();
    const month = String(currentDate.getMonth() + 1).padStart(2, '0');
    const day = String(currentDate.getDate()).padStart(2, '0');
    const hours = String(currentDate.getHours()).padStart(2, '0');
    const minutes = String(currentDate.getMinutes()).padStart(2, '0');
    const seconds = String(currentDate.getSeconds()).padStart(2, '0');
    const milliseconds = String(currentDate.getMilliseconds()).padStart(3, '0');

    const randomNumber = String(Math.floor(Math.random() * 100000)).padStart(5, '0');

    const uuid = `${year}${month}${day}${hours}${minutes}${seconds}${milliseconds}_${randomNumber}`;
    const time = currentDate.toISOString();

    const result = {
      uuid: uuid,
      time: time
    };
    return result
  }
  

  


  return (
    <>
      <Head>
        <title>Gloomy Chat</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavBar />
      <div className="wrap">
        {/* <header className="img-box header mb-100 hp-300">
          <div className="img-box--words">
            <h1>Gloomy Chat</h1>
            <p>Video Call &amp; Text Chat</p>
          </div>
        </header> */}

       <section className="section fadeInUp active blink mt-0 pb-10">
          {/* <h2 className="title-03 mt-0" id="intro">{chatData.name}</h2> */}
          <div className={`ly-flex-wrap mt-50 ${styles['chatroom-box__wrap']}`}>
              <article className={`${styles['chatroom-box']}`}>
                <button className={`${styles['chatroom-box__division']}`}>
                  <div>
                    <img src='' alt="profile" width={60} height={60} />
                  </div>
                  <div>
                    <div className="ly-flex-wrap justify-between align-center">
                      <h3>dddd</h3>
                      <p className='mt-10'>ddddd</p>
                    </div>
                  </div>
                </button>
              </article>
          </div>
        </section>
      </div>
      <Footer />
    </>
  )
}
